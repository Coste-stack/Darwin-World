plugins {
    id 'java'
    id 'application'
    id 'org.javamodularity.moduleplugin' version '1.8.12'
    id 'org.openjfx.javafxplugin' version '0.0.13'
    id 'org.beryx.jlink' version '2.25.0'
}

version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

ext {
    junitVersion = '5.9.2'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(23)
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

application {
    mainClass.set("application.Main")
}

javafx {
    version = '17.0.6'
    modules = ['javafx.controls', 'javafx.fxml', 'javafx.base', 'javafx.graphics']
}

dependencies {
    // javafx - for running
    implementation 'org.controlsfx:controlsfx:11.1.2'
    implementation 'org.openjfx:javafx-controls:17.0.6'
    implementation 'org.openjfx:javafx-fxml:17.0.6'
    implementation 'org.openjfx:javafx-base:17.0.6'

    /* Tests */
    // junit
    testImplementation("org.junit.jupiter:junit-jupiter-api:${junitVersion}")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${junitVersion}")
    // javafx - for tests
    testImplementation 'org.controlsfx:controlsfx:11.1.2'
    testImplementation 'org.openjfx:javafx-controls:17.0.6'
    testImplementation 'org.openjfx:javafx-fxml:17.0.6'
    testImplementation 'org.openjfx:javafx-base:17.0.6'
}

test {
    useJUnitPlatform()
    jvmArgs = [
            '--module-path', configurations.testRuntimeClasspath.asPath,
            '--add-modules', 'javafx.controls,javafx.fxml,javafx.base,javafx.graphics'
    ]
}

run {
    jvmArgs = [
            '--module-path', classpath.asPath,
            '--add-modules', 'javafx.controls,javafx.fxml,javafx.base,javafx.graphics'
    ]
}

jlink {
    imageZip = project.file("${buildDir}/distributions/app-${javafx.platform.classifier}.zip")
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    launcher {
        name = 'FXGradle'
    }
}


jlinkZip {
    group = 'distribution'
}

task customFatJar(type: Jar) {
    manifest {
        attributes 'Main-Class': 'Application'
    }

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it)}}
    with jar
}